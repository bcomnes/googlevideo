// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: video_streaming/video_playback_abr_request.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId } from "../misc/common.js";
import { BufferedRange } from "./buffered_range.js";
import { ClientAbrState } from "./client_abr_state.js";
import { StreamerContext } from "./streamer_context.js";
export const protobufPackage = "video_streaming";
function createBaseVideoPlaybackAbrRequest() {
    return {
        clientAbrState: undefined,
        selectedFormatIds: [],
        bufferedRanges: [],
        playerTimeMs: 0,
        videoPlaybackUstreamerConfig: new Uint8Array(0),
        lo: undefined,
        selectedAudioFormatIds: [],
        selectedVideoFormatIds: [],
        streamerContext: undefined,
        field21: undefined,
        field22: 0,
        field23: 0,
        field1000: [],
    };
}
export const VideoPlaybackAbrRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientAbrState !== undefined) {
            ClientAbrState.encode(message.clientAbrState, writer.uint32(10).fork()).join();
        }
        for (const v of message.selectedFormatIds) {
            FormatId.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.bufferedRanges) {
            BufferedRange.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.playerTimeMs !== undefined && message.playerTimeMs !== 0) {
            writer.uint32(32).int64(message.playerTimeMs);
        }
        if (message.videoPlaybackUstreamerConfig !== undefined && message.videoPlaybackUstreamerConfig.length !== 0) {
            writer.uint32(42).bytes(message.videoPlaybackUstreamerConfig);
        }
        if (message.lo !== undefined) {
            Lo.encode(message.lo, writer.uint32(50).fork()).join();
        }
        for (const v of message.selectedAudioFormatIds) {
            FormatId.encode(v, writer.uint32(130).fork()).join();
        }
        for (const v of message.selectedVideoFormatIds) {
            FormatId.encode(v, writer.uint32(138).fork()).join();
        }
        if (message.streamerContext !== undefined) {
            StreamerContext.encode(message.streamerContext, writer.uint32(154).fork()).join();
        }
        if (message.field21 !== undefined) {
            OQa.encode(message.field21, writer.uint32(170).fork()).join();
        }
        if (message.field22 !== undefined && message.field22 !== 0) {
            writer.uint32(176).int32(message.field22);
        }
        if (message.field23 !== undefined && message.field23 !== 0) {
            writer.uint32(184).int32(message.field23);
        }
        for (const v of message.field1000) {
            Pqa.encode(v, writer.uint32(8002).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoPlaybackAbrRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientAbrState = ClientAbrState.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.selectedFormatIds.push(FormatId.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.bufferedRanges.push(BufferedRange.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.playerTimeMs = longToNumber(reader.int64());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.videoPlaybackUstreamerConfig = reader.bytes();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.lo = Lo.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.selectedAudioFormatIds.push(FormatId.decode(reader, reader.uint32()));
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.selectedVideoFormatIds.push(FormatId.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.streamerContext = StreamerContext.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.field21 = OQa.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.field22 = reader.int32();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.field23 = reader.int32();
                    continue;
                }
                case 1000: {
                    if (tag !== 8002) {
                        break;
                    }
                    message.field1000.push(Pqa.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLo() {
    return { formatId: undefined, Lj: 0, sequenceNumber: 0, field4: undefined, MZ: 0 };
}
export const Lo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.formatId !== undefined) {
            FormatId.encode(message.formatId, writer.uint32(10).fork()).join();
        }
        if (message.Lj !== undefined && message.Lj !== 0) {
            writer.uint32(16).int32(message.Lj);
        }
        if (message.sequenceNumber !== undefined && message.sequenceNumber !== 0) {
            writer.uint32(24).int32(message.sequenceNumber);
        }
        if (message.field4 !== undefined) {
            Lo_Field4.encode(message.field4, writer.uint32(34).fork()).join();
        }
        if (message.MZ !== undefined && message.MZ !== 0) {
            writer.uint32(40).int32(message.MZ);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.formatId = FormatId.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.Lj = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sequenceNumber = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.field4 = Lo_Field4.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.MZ = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLo_Field4() {
    return { field1: 0, field2: 0, field3: 0 };
}
export const Lo_Field4 = {
    encode(message, writer = new BinaryWriter()) {
        if (message.field1 !== undefined && message.field1 !== 0) {
            writer.uint32(8).int32(message.field1);
        }
        if (message.field2 !== undefined && message.field2 !== 0) {
            writer.uint32(16).int32(message.field2);
        }
        if (message.field3 !== undefined && message.field3 !== 0) {
            writer.uint32(24).int32(message.field3);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLo_Field4();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.field1 = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.field2 = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.field3 = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseOQa() {
    return { field1: [], field2: new Uint8Array(0), field3: "", field4: 0, field5: 0, field6: "" };
}
export const OQa = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.field1) {
            writer.uint32(10).string(v);
        }
        if (message.field2 !== undefined && message.field2.length !== 0) {
            writer.uint32(18).bytes(message.field2);
        }
        if (message.field3 !== undefined && message.field3 !== "") {
            writer.uint32(26).string(message.field3);
        }
        if (message.field4 !== undefined && message.field4 !== 0) {
            writer.uint32(32).int32(message.field4);
        }
        if (message.field5 !== undefined && message.field5 !== 0) {
            writer.uint32(40).int32(message.field5);
        }
        if (message.field6 !== undefined && message.field6 !== "") {
            writer.uint32(50).string(message.field6);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOQa();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.field1.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.field2 = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.field3 = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.field4 = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.field5 = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.field6 = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePqa() {
    return { formats: [], ud: [], clipId: "" };
}
export const Pqa = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.formats) {
            FormatId.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.ud) {
            BufferedRange.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.clipId !== undefined && message.clipId !== "") {
            writer.uint32(26).string(message.clipId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePqa();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.formats.push(FormatId.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ud.push(BufferedRange.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clipId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
