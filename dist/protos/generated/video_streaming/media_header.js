// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: video_streaming/media_header.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId } from "../misc/common.js";
import { TimeRange } from "./time_range.js";
export const protobufPackage = "video_streaming";
export var MediaHeader_CompressionAlgorithm;
(function (MediaHeader_CompressionAlgorithm) {
    MediaHeader_CompressionAlgorithm[MediaHeader_CompressionAlgorithm["UNKNOWN"] = 0] = "UNKNOWN";
    MediaHeader_CompressionAlgorithm[MediaHeader_CompressionAlgorithm["NONE"] = 1] = "NONE";
    MediaHeader_CompressionAlgorithm[MediaHeader_CompressionAlgorithm["GZIP"] = 2] = "GZIP";
    MediaHeader_CompressionAlgorithm[MediaHeader_CompressionAlgorithm["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaHeader_CompressionAlgorithm || (MediaHeader_CompressionAlgorithm = {}));
function createBaseMediaHeader() {
    return {
        headerId: 0,
        videoId: "",
        itag: 0,
        lmt: 0,
        xtags: "",
        startRange: 0,
        compressionAlgorithm: 0,
        isInitSeg: false,
        sequenceNumber: 0,
        field10: 0,
        startMs: 0,
        durationMs: 0,
        formatId: undefined,
        contentLength: 0,
        timeRange: undefined,
    };
}
export const MediaHeader = {
    encode(message, writer = new BinaryWriter()) {
        if (message.headerId !== undefined && message.headerId !== 0) {
            writer.uint32(8).uint32(message.headerId);
        }
        if (message.videoId !== undefined && message.videoId !== "") {
            writer.uint32(18).string(message.videoId);
        }
        if (message.itag !== undefined && message.itag !== 0) {
            writer.uint32(24).int32(message.itag);
        }
        if (message.lmt !== undefined && message.lmt !== 0) {
            writer.uint32(32).uint64(message.lmt);
        }
        if (message.xtags !== undefined && message.xtags !== "") {
            writer.uint32(42).string(message.xtags);
        }
        if (message.startRange !== undefined && message.startRange !== 0) {
            writer.uint32(48).int64(message.startRange);
        }
        if (message.compressionAlgorithm !== undefined && message.compressionAlgorithm !== 0) {
            writer.uint32(56).int32(message.compressionAlgorithm);
        }
        if (message.isInitSeg !== undefined && message.isInitSeg !== false) {
            writer.uint32(64).bool(message.isInitSeg);
        }
        if (message.sequenceNumber !== undefined && message.sequenceNumber !== 0) {
            writer.uint32(72).int64(message.sequenceNumber);
        }
        if (message.field10 !== undefined && message.field10 !== 0) {
            writer.uint32(80).int64(message.field10);
        }
        if (message.startMs !== undefined && message.startMs !== 0) {
            writer.uint32(88).int64(message.startMs);
        }
        if (message.durationMs !== undefined && message.durationMs !== 0) {
            writer.uint32(96).int64(message.durationMs);
        }
        if (message.formatId !== undefined) {
            FormatId.encode(message.formatId, writer.uint32(106).fork()).join();
        }
        if (message.contentLength !== undefined && message.contentLength !== 0) {
            writer.uint32(112).int64(message.contentLength);
        }
        if (message.timeRange !== undefined) {
            TimeRange.encode(message.timeRange, writer.uint32(122).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.headerId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.videoId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.itag = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.lmt = longToNumber(reader.uint64());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.xtags = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.startRange = longToNumber(reader.int64());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.compressionAlgorithm = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.isInitSeg = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.sequenceNumber = longToNumber(reader.int64());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.field10 = longToNumber(reader.int64());
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.startMs = longToNumber(reader.int64());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.durationMs = longToNumber(reader.int64());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.formatId = FormatId.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.contentLength = longToNumber(reader.int64());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.timeRange = TimeRange.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
