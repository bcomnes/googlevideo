// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: misc/common.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "misc";
export var AudioQuality;
(function (AudioQuality) {
    AudioQuality[AudioQuality["UNKNOWN"] = 0] = "UNKNOWN";
    AudioQuality[AudioQuality["ULTRALOW"] = 5] = "ULTRALOW";
    AudioQuality[AudioQuality["LOW"] = 10] = "LOW";
    AudioQuality[AudioQuality["MEDIUM"] = 20] = "MEDIUM";
    AudioQuality[AudioQuality["HIGH"] = 30] = "HIGH";
    AudioQuality[AudioQuality["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AudioQuality || (AudioQuality = {}));
export var VideoQualitySetting;
(function (VideoQualitySetting) {
    VideoQualitySetting[VideoQualitySetting["UNKNOWN"] = 0] = "UNKNOWN";
    VideoQualitySetting[VideoQualitySetting["HIGHER_QUALITY"] = 1] = "HIGHER_QUALITY";
    VideoQualitySetting[VideoQualitySetting["DATA_SAVER"] = 2] = "DATA_SAVER";
    VideoQualitySetting[VideoQualitySetting["ADVANCED_MENU"] = 3] = "ADVANCED_MENU";
    VideoQualitySetting[VideoQualitySetting["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VideoQualitySetting || (VideoQualitySetting = {}));
export var PlaybackAudioRouteOutputType;
(function (PlaybackAudioRouteOutputType) {
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["UNKNOWN"] = 0] = "UNKNOWN";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["LINE_OUT"] = 1] = "LINE_OUT";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["HEADPHONES"] = 2] = "HEADPHONES";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["BLUETOOTH_A2DP"] = 3] = "BLUETOOTH_A2DP";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["BUILT_IN_RECEIVER"] = 4] = "BUILT_IN_RECEIVER";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["BUILT_IN_SPEAKER"] = 5] = "BUILT_IN_SPEAKER";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["HDMI"] = 6] = "HDMI";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["AIR_PLAY"] = 7] = "AIR_PLAY";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["BLUETOOTH_LE"] = 8] = "BLUETOOTH_LE";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["BLUETOOTH_HFP"] = 9] = "BLUETOOTH_HFP";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["USB_AUDIO"] = 10] = "USB_AUDIO";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["CAR_PLAY"] = 11] = "CAR_PLAY";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["ANDROID_AUDIO"] = 12] = "ANDROID_AUDIO";
    PlaybackAudioRouteOutputType[PlaybackAudioRouteOutputType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PlaybackAudioRouteOutputType || (PlaybackAudioRouteOutputType = {}));
export var NetworkMeteredState;
(function (NetworkMeteredState) {
    NetworkMeteredState[NetworkMeteredState["UNKNOWN"] = 0] = "UNKNOWN";
    NetworkMeteredState[NetworkMeteredState["UNMETERED"] = 1] = "UNMETERED";
    NetworkMeteredState[NetworkMeteredState["METERED"] = 2] = "METERED";
    NetworkMeteredState[NetworkMeteredState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NetworkMeteredState || (NetworkMeteredState = {}));
export var SeekSource;
(function (SeekSource) {
    SeekSource[SeekSource["UNKNOWN"] = 0] = "UNKNOWN";
    SeekSource[SeekSource["TIMESTAMP_IN_COMMENTS"] = 1] = "TIMESTAMP_IN_COMMENTS";
    SeekSource[SeekSource["TIMESTAMP_IN_DESCRIPTION"] = 2] = "TIMESTAMP_IN_DESCRIPTION";
    SeekSource[SeekSource["MACRO_MARKER_LIST_ITEM"] = 3] = "MACRO_MARKER_LIST_ITEM";
    SeekSource[SeekSource["DOUBLE_TAP_TO_SEEK"] = 4] = "DOUBLE_TAP_TO_SEEK";
    SeekSource[SeekSource["DOUBLE_TAP_TO_SKIP_CHAPTER"] = 5] = "DOUBLE_TAP_TO_SKIP_CHAPTER";
    SeekSource[SeekSource["PICK_UP_PLAY_HEAD"] = 6] = "PICK_UP_PLAY_HEAD";
    SeekSource[SeekSource["SLIDE_ON_SCRUBBER_BAR"] = 7] = "SLIDE_ON_SCRUBBER_BAR";
    SeekSource[SeekSource["SLIDE_ON_PLAYER"] = 8] = "SLIDE_ON_PLAYER";
    SeekSource[SeekSource["SABR_PARTIAL_CHUNK"] = 9] = "SABR_PARTIAL_CHUNK";
    SeekSource[SeekSource["SABR_SEEK_TO_HEAD"] = 10] = "SABR_SEEK_TO_HEAD";
    SeekSource[SeekSource["SABR_LIVE_DVR_USER_SEEK"] = 11] = "SABR_LIVE_DVR_USER_SEEK";
    SeekSource[SeekSource["SABR_SEEK_TO_DVR_LOWER_BOUND"] = 12] = "SABR_SEEK_TO_DVR_LOWER_BOUND";
    SeekSource[SeekSource["SABR_SEEK_TO_DVR_UPPER_BOUND"] = 13] = "SABR_SEEK_TO_DVR_UPPER_BOUND";
    SeekSource[SeekSource["SSDAI_INTERNAL"] = 14] = "SSDAI_INTERNAL";
    SeekSource[SeekSource["START_PLAYBACK"] = 15] = "START_PLAYBACK";
    SeekSource[SeekSource["SABR_ACCURATE_SEEK"] = 17] = "SABR_ACCURATE_SEEK";
    SeekSource[SeekSource["START_PLAYBACK_SEEK_TO_END"] = 18] = "START_PLAYBACK_SEEK_TO_END";
    SeekSource[SeekSource["IOS_PLAYER_REMOVED_SEGMENTS"] = 19] = "IOS_PLAYER_REMOVED_SEGMENTS";
    SeekSource[SeekSource["IOS_PLAYER_SEGMENT_LIST"] = 20] = "IOS_PLAYER_SEGMENT_LIST";
    SeekSource[SeekSource["IOS_PLAYER_ITEM_SEEK"] = 21] = "IOS_PLAYER_ITEM_SEEK";
    SeekSource[SeekSource["IOS_PLAYER_ITEM_SEEK_TO_END"] = 22] = "IOS_PLAYER_ITEM_SEEK_TO_END";
    SeekSource[SeekSource["IOS_PLAYER_SEEK_TO_END_TO_RESYNC"] = 23] = "IOS_PLAYER_SEEK_TO_END_TO_RESYNC";
    SeekSource[SeekSource["IOS_SEEK_ACCESSIBILITY_BUTTON"] = 24] = "IOS_SEEK_ACCESSIBILITY_BUTTON";
    SeekSource[SeekSource["FINE_SCRUBBER_SLIDE_ON_FILMSTRIP"] = 25] = "FINE_SCRUBBER_SLIDE_ON_FILMSTRIP";
    SeekSource[SeekSource["FINE_SCRUBBER_TAP_ON_FILMSTRIP"] = 26] = "FINE_SCRUBBER_TAP_ON_FILMSTRIP";
    SeekSource[SeekSource["FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR"] = 27] = "FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR";
    SeekSource[SeekSource["SEEK_BUTTON_ON_PLAYER_CONTROL"] = 28] = "SEEK_BUTTON_ON_PLAYER_CONTROL";
    SeekSource[SeekSource["SABR_INGESTION_WALL_TIME_SEEK"] = 29] = "SABR_INGESTION_WALL_TIME_SEEK";
    SeekSource[SeekSource["PLAYER_VIEW_REPARENT_INTERNAL"] = 30] = "PLAYER_VIEW_REPARENT_INTERNAL";
    SeekSource[SeekSource["PRESS_REWIND_PLAY_BACK_CONTROL"] = 31] = "PRESS_REWIND_PLAY_BACK_CONTROL";
    SeekSource[SeekSource["PRESS_FAST_FORWARD_PLAY_BACK_CONTROL"] = 32] = "PRESS_FAST_FORWARD_PLAY_BACK_CONTROL";
    SeekSource[SeekSource["PRESS_LIVE_SYNC_ICON"] = 33] = "PRESS_LIVE_SYNC_ICON";
    SeekSource[SeekSource["PEG_TO_LIVE"] = 34] = "PEG_TO_LIVE";
    SeekSource[SeekSource["ANDROID_MEDIA_SESSION"] = 35] = "ANDROID_MEDIA_SESSION";
    SeekSource[SeekSource["TAP_ON_REPLAY_ACTION"] = 36] = "TAP_ON_REPLAY_ACTION";
    SeekSource[SeekSource["AUTOMATIC_REPLAY_ACTION"] = 37] = "AUTOMATIC_REPLAY_ACTION";
    SeekSource[SeekSource["NON_USER_SEEK_TO_PREVIOUS"] = 38] = "NON_USER_SEEK_TO_PREVIOUS";
    SeekSource[SeekSource["NON_USER_SEEK_TO_NEXT"] = 39] = "NON_USER_SEEK_TO_NEXT";
    SeekSource[SeekSource["HIGHLIGHTS_TAP_PREVIOUS_PLAY"] = 66] = "HIGHLIGHTS_TAP_PREVIOUS_PLAY";
    SeekSource[SeekSource["HIGHLIGHTS_TAP_NEXT_PLAY"] = 40] = "HIGHLIGHTS_TAP_NEXT_PLAY";
    SeekSource[SeekSource["HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY"] = 41] = "HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY";
    SeekSource[SeekSource["HIGHLIGHTS_TAP_LIST_ITEM"] = 42] = "HIGHLIGHTS_TAP_LIST_ITEM";
    SeekSource[SeekSource["HIGHLIGHTS_AUTOMATIC_NEXT_PLAY"] = 43] = "HIGHLIGHTS_AUTOMATIC_NEXT_PLAY";
    SeekSource[SeekSource["HIGHLIGHTS_SEEK_TO_FIRST_PLAY"] = 44] = "HIGHLIGHTS_SEEK_TO_FIRST_PLAY";
    SeekSource[SeekSource["HIGHLIGHTS_SEEK_TO_END"] = 45] = "HIGHLIGHTS_SEEK_TO_END";
    SeekSource[SeekSource["SEGMENTS_TAP_LIST_ITEM"] = 46] = "SEGMENTS_TAP_LIST_ITEM";
    SeekSource[SeekSource["PIP_FAST_FORWARD_BUTTON"] = 47] = "PIP_FAST_FORWARD_BUTTON";
    SeekSource[SeekSource["PIP_REWIND_BUTTON"] = 48] = "PIP_REWIND_BUTTON";
    SeekSource[SeekSource["PIP_RESUME_ON_HEAD"] = 49] = "PIP_RESUME_ON_HEAD";
    SeekSource[SeekSource["MOVING_CLIP_FRAME"] = 50] = "MOVING_CLIP_FRAME";
    SeekSource[SeekSource["RESUME_CLIP_PREVIOUS_POSITION"] = 51] = "RESUME_CLIP_PREVIOUS_POSITION";
    SeekSource[SeekSource["SEEK_TO_NEXT_CHAPTER"] = 52] = "SEEK_TO_NEXT_CHAPTER";
    SeekSource[SeekSource["SEEK_TO_PREVIOUS_CHAPTER"] = 53] = "SEEK_TO_PREVIOUS_CHAPTER";
    SeekSource[SeekSource["IOS_SHAREPLAY_PAUSE"] = 54] = "IOS_SHAREPLAY_PAUSE";
    SeekSource[SeekSource["IOS_SHAREPLAY_SEEK"] = 55] = "IOS_SHAREPLAY_SEEK";
    SeekSource[SeekSource["IOS_SHAREPLAY_SYNC_RESPONSE"] = 56] = "IOS_SHAREPLAY_SYNC_RESPONSE";
    SeekSource[SeekSource["SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO"] = 57] = "SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO";
    SeekSource[SeekSource["SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS"] = 58] = "SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS";
    SeekSource[SeekSource["SABR_SEEK_TO_CLOSEST_KEYFRAME"] = 59] = "SABR_SEEK_TO_CLOSEST_KEYFRAME";
    SeekSource[SeekSource["SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS"] = 60] = "SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS";
    SeekSource[SeekSource["CLIP_SLIDE_ON_FLIMSTRIP"] = 61] = "CLIP_SLIDE_ON_FLIMSTRIP";
    SeekSource[SeekSource["PICK_UP_CLIP_SLIDER"] = 62] = "PICK_UP_CLIP_SLIDER";
    SeekSource[SeekSource["FINE_SCRUBBER_CANCELLED"] = 63] = "FINE_SCRUBBER_CANCELLED";
    SeekSource[SeekSource["INLINE_PLAYER_SEEK_CHAPTER"] = 64] = "INLINE_PLAYER_SEEK_CHAPTER";
    SeekSource[SeekSource["INLINE_PLAYER_SEEK_SECONDS"] = 65] = "INLINE_PLAYER_SEEK_SECONDS";
    SeekSource[SeekSource["HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN"] = 67] = "HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN";
    SeekSource[SeekSource["LARGE_CONTROLS_FORWARD_BUTTON"] = 68] = "LARGE_CONTROLS_FORWARD_BUTTON";
    SeekSource[SeekSource["LARGE_CONTROLS_REWIND_BUTTON"] = 69] = "LARGE_CONTROLS_REWIND_BUTTON";
    SeekSource[SeekSource["LARGE_CONTROLS_SCRUBBER_BAR"] = 70] = "LARGE_CONTROLS_SCRUBBER_BAR";
    SeekSource[SeekSource["SEEK_BACKWARD_5S"] = 71] = "SEEK_BACKWARD_5S";
    SeekSource[SeekSource["SEEK_FORWARD_5S"] = 72] = "SEEK_FORWARD_5S";
    SeekSource[SeekSource["SEEK_BACKWARD_10S"] = 73] = "SEEK_BACKWARD_10S";
    SeekSource[SeekSource["SEEK_FORWARD_10S"] = 74] = "SEEK_FORWARD_10S";
    SeekSource[SeekSource["SEEK_FORWARD_60S"] = 75] = "SEEK_FORWARD_60S";
    SeekSource[SeekSource["SEEK_BACKWARD_60S"] = 76] = "SEEK_BACKWARD_60S";
    SeekSource[SeekSource["SEEK_TO_NEXT_FRAME"] = 77] = "SEEK_TO_NEXT_FRAME";
    SeekSource[SeekSource["SEEK_TO_PREV_FRAME"] = 78] = "SEEK_TO_PREV_FRAME";
    SeekSource[SeekSource["KEYBOARD_SEEK_TO_BEGINNING"] = 79] = "KEYBOARD_SEEK_TO_BEGINNING";
    SeekSource[SeekSource["KEYBOARD_SEEK_TO_END"] = 80] = "KEYBOARD_SEEK_TO_END";
    SeekSource[SeekSource["SEEK_PERCENT_OF_VIDEO"] = 81] = "SEEK_PERCENT_OF_VIDEO";
    SeekSource[SeekSource["HIDDEN_FAST_FORWARD_BUTTON"] = 82] = "HIDDEN_FAST_FORWARD_BUTTON";
    SeekSource[SeekSource["HIDDEN_REWIND_BUTTON"] = 83] = "HIDDEN_REWIND_BUTTON";
    SeekSource[SeekSource["TIMESTAMP"] = 84] = "TIMESTAMP";
    SeekSource[SeekSource["LR_MEDIA_SESSION_SEEK"] = 87] = "LR_MEDIA_SESSION_SEEK";
    SeekSource[SeekSource["MIDROLLS_WITH_TIME_RANGE"] = 88] = "MIDROLLS_WITH_TIME_RANGE";
    SeekSource[SeekSource["SKIP_AD"] = 89] = "SKIP_AD";
    SeekSource[SeekSource["SEEK_TO_PREVIOUS"] = 90] = "SEEK_TO_PREVIOUS";
    SeekSource[SeekSource["SEEK_TO_NEXT"] = 91] = "SEEK_TO_NEXT";
    SeekSource[SeekSource["LR_QUICK_SEEK"] = 92] = "LR_QUICK_SEEK";
    SeekSource[SeekSource["ONESIE_LIVE"] = 93] = "ONESIE_LIVE";
    SeekSource[SeekSource["LR_PLAYER_CONTROL_ACTION"] = 94] = "LR_PLAYER_CONTROL_ACTION";
    SeekSource[SeekSource["UNPLUGGED_LENS_START_CLIP"] = 95] = "UNPLUGGED_LENS_START_CLIP";
    SeekSource[SeekSource["LR_KEY_PLAYS"] = 96] = "LR_KEY_PLAYS";
    SeekSource[SeekSource["SSAP_AD_FMT_FATAL"] = 97] = "SSAP_AD_FMT_FATAL";
    SeekSource[SeekSource["TVHTML5_INPUT_SOURCE_KEY_EVENT"] = 98] = "TVHTML5_INPUT_SOURCE_KEY_EVENT";
    SeekSource[SeekSource["TVHTML5_INPUT_SOURCE_CONTROLS"] = 99] = "TVHTML5_INPUT_SOURCE_CONTROLS";
    SeekSource[SeekSource["TVHTML5_INPUT_SOURCE_TOUCH"] = 100] = "TVHTML5_INPUT_SOURCE_TOUCH";
    SeekSource[SeekSource["TVHTML5_INPUT_SOURCE_TOUCHPAD"] = 101] = "TVHTML5_INPUT_SOURCE_TOUCHPAD";
    SeekSource[SeekSource["SEEK_TO_HEAD"] = 102] = "SEEK_TO_HEAD";
    SeekSource[SeekSource["AUTOMATIC_PREVIEW_REPLAY_ACTION"] = 103] = "AUTOMATIC_PREVIEW_REPLAY_ACTION";
    SeekSource[SeekSource["H5_MEDIA_ELEMENT_EVENT"] = 104] = "H5_MEDIA_ELEMENT_EVENT";
    SeekSource[SeekSource["H5_WORKAROUND_SEEK"] = 105] = "H5_WORKAROUND_SEEK";
    SeekSource[SeekSource["MINIPLAYER_REWIND_BUTTON"] = 106] = "MINIPLAYER_REWIND_BUTTON";
    SeekSource[SeekSource["MINIPLAYER_FAST_FORWARD_BUTTON"] = 107] = "MINIPLAYER_FAST_FORWARD_BUTTON";
    SeekSource[SeekSource["SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK"] = 108] = "SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK";
    SeekSource[SeekSource["SLIDE_ON_SCRUBBER_BAR_CHAPTER"] = 109] = "SLIDE_ON_SCRUBBER_BAR_CHAPTER";
    SeekSource[SeekSource["ANDROID_CLEAR_BUFFER"] = 110] = "ANDROID_CLEAR_BUFFER";
    SeekSource[SeekSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SeekSource || (SeekSource = {}));
export var OnesieRequestTarget;
(function (OnesieRequestTarget) {
    OnesieRequestTarget[OnesieRequestTarget["UNKNOWN"] = 0] = "UNKNOWN";
    OnesieRequestTarget[OnesieRequestTarget["ENCRYPTED_PLAYER_SERVICE"] = 1] = "ENCRYPTED_PLAYER_SERVICE";
    OnesieRequestTarget[OnesieRequestTarget["ENCRYPTED_WATCH_SERVICE_DEPRECATED"] = 2] = "ENCRYPTED_WATCH_SERVICE_DEPRECATED";
    OnesieRequestTarget[OnesieRequestTarget["ENCRYPTED_WATCH_SERVICE"] = 3] = "ENCRYPTED_WATCH_SERVICE";
    OnesieRequestTarget[OnesieRequestTarget["INNERTUBE_ENCRYPTED_SERVICE"] = 4] = "INNERTUBE_ENCRYPTED_SERVICE";
    OnesieRequestTarget[OnesieRequestTarget["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OnesieRequestTarget || (OnesieRequestTarget = {}));
function createBaseHttpHeader() {
    return { name: "", value: "" };
}
export const HttpHeader = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== undefined && message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== undefined && message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFormatId() {
    return { itag: 0, lastModified: 0, xtags: "" };
}
export const FormatId = {
    encode(message, writer = new BinaryWriter()) {
        if (message.itag !== undefined && message.itag !== 0) {
            writer.uint32(8).int32(message.itag);
        }
        if (message.lastModified !== undefined && message.lastModified !== 0) {
            writer.uint32(16).uint64(message.lastModified);
        }
        if (message.xtags !== undefined && message.xtags !== "") {
            writer.uint32(26).string(message.xtags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormatId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itag = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.lastModified = longToNumber(reader.uint64());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.xtags = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInitRange() {
    return { start: 0, end: 0 };
}
export const InitRange = {
    encode(message, writer = new BinaryWriter()) {
        if (message.start !== undefined && message.start !== 0) {
            writer.uint32(8).int32(message.start);
        }
        if (message.end !== undefined && message.end !== 0) {
            writer.uint32(16).int32(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.start = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.end = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseIndexRange() {
    return { start: 0, end: 0 };
}
export const IndexRange = {
    encode(message, writer = new BinaryWriter()) {
        if (message.start !== undefined && message.start !== 0) {
            writer.uint32(8).int32(message.start);
        }
        if (message.end !== undefined && message.end !== 0) {
            writer.uint32(16).int32(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIndexRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.start = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.end = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseKeyValuePair() {
    return { key: "", value: "" };
}
export const KeyValuePair = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== undefined && message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined && message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyValuePair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
